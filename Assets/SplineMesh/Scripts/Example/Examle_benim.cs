using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;

namespace SplineMesh
{
    /// <summary>
    /// Example of component to show that the spline is an independant mathematical component and can be used for other purposes than mesh deformation.
    /// 
    /// This component is only for demo purpose and is not intended to be used as-is.
    /// 
    /// We only move an object along the spline. Imagine a camera route, a ship patrol...
    /// </summary>
    [ExecuteInEditMode]
    public class Examle_benim : MonoBehaviour
{
        private GameObject generated;
        public Spline spline;
        private Spline cizgi;
        public float rate = 0,hassas_rate;

        public GameObject Follower;
        public float DurationInSecond;
        public float donus;
        public float kayma,yukseklik;
        public bool rampa;
        public bool rampa_ters;



        /* private float baslat;
         private void Start()
         {
             baslat = Time.time + 2;

         }
         private void Update()
         {
             if (baslat < Time.time) transform.GetComponent<Examle_benim>().enabled = false;


         }*/

        private void OnEnable()
        {
            //rate = 0;
            string generatedName = "generated by " + GetType().Name;
            var generatedTranform = transform.Find(generatedName);
            generated = generatedTranform != null ? generatedTranform.gameObject : Instantiate(Follower, gameObject.transform);
            generated.name = generatedName;
            generated.isStatic = true;

            cizgi = spline.GetComponent<Spline>();
#if UNITY_EDITOR
            EditorApplication.update += EditorUpdate;
#endif
        }

        void OnDisable()
        {
#if UNITY_EDITOR
            EditorApplication.update -= EditorUpdate;
#endif
        }

        void EditorUpdate()
        {

            if (hassas_rate > spline.nodes.Count - 1)
            {
                hassas_rate -= spline.nodes.Count - 1;
            }
            PlaceFollower();
        }

        private void PlaceFollower()
        {
            if (generated != null)
            {
                hassas_rate = rate / 10;

                CurveSample sample = spline.GetSample(hassas_rate);
                generated.transform.localRotation = sample.Rotation;
                
                generated.transform.localPosition = sample.location + generated.transform.right*kayma+generated.transform.up*yukseklik/4;





                generated.transform.localRotation = sample.Rotation;
                  generated.transform.Rotate(0, donus, 0);              

            }



        }
    }
}
